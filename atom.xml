<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-18T08:09:25.933Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3中的bytes和str类型</title>
    <link href="http://yoursite.com/2018/08/18/Python3%E4%B8%AD%E7%9A%84bytes%E5%92%8Cstr%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/08/18/Python3中的bytes和str类型/</id>
    <published>2018-08-18T08:06:47.000Z</published>
    <updated>2018-08-18T08:09:25.933Z</updated>
    
    <content type="html"><![CDATA[<p>编码历史：</p><p>最早的字符编码规范是ASCII码，一种8位即1个字节的编码规范</p><p>以ASCII编码为例，它规定1个字节8个比特位代表1个字符的编码，也就是“00000000”这么宽，一个一个字节的解读。例如：01000001表示大写字母A，有时我们会“偷懒”的用65这个十进制来表示A在ASCII中的编码。8个比特位，可以没有重复的最多表示2的8次方(255)个字符。</p><p>后来，计算机得到普及，中文、日文、韩文等等国家的文字需要在计算机内表示，ASCII的255位远远不够，于是标准组织制定出了叫做UNICODE的万国码，它规定任何一个字符（不管哪国的）至少以2个字节表示，可以更多。其中，英文字母就是用2个字节，而汉字是3个字节。这个编码虽然很好，满足了所有人的要求，但是它不兼容ASCII，同时还占用较多的空间和内存。因为，在计算机世界更多的字符是英文字母，明明可以1个字节就能够表示，非要用2个。</p><p>于是UTF-8编码应运而生，它规定英文字母系列用1个字节表示，汉字用3个字节表示等等。因此，它兼容ASCII，可以解码早期的文档。UTF-8很快就得到了广泛的应用。</p><p>在编码的发展历程中，我国还创造了自己的编码方式，例如GBK，GB2312，BIG5。他们只局限于在国内使用，不被国外认可。在GBK编码中，中文汉字占2个字节。</p><p><img src="/2018/08/18/Python3中的bytes和str类型/1.png" alt="img"></p><p>Python有个内置函数bytes()可以将字符串str类型转换成bytes类型，b实际上是一串01的组合，但为了在ide环境中让我们相对直观的观察，它被表现成了b’\xe4\xb8\xad\xe6\x96\x87’这种形式，开头的b表示这是一个bytes类型。\xe4是十六进制的表示方式，它占用1个字节的长度，因此”中文“被编码成utf-8后，我们可以数得出一共用了6个字节，每个汉字占用3个，这印证了上面的论述。在使用内置函数bytes()的时候，必须明确encoding的参数，不可省略。</p><p>我们都知道，字符串类str里有一个encode()方法，它是从字符串向比特流的编码过程。而bytes类型恰好有个decode()方法，它是从比特流向字符串解码的过程。除此之外，我们查看Python源码会发现bytes和str拥有几乎一模一样的方法列表，最大的区别就是encode和decode。</p><p>从实质上来说，字符串在磁盘上的保存形式也是01的组合，也需要编码解码。</p><p>1、在将字符串存入磁盘和从磁盘读取字符串的过程中，Python自动地帮你完成了编码和解码的工作，你不需要关心它的过程。</p><p>2、使用bytes类型，实质上是告诉Python，不需要它帮你自动地完成编码和解码的工作，而是用户自己手动进行，并指定编码格式。</p><p>3、Python已经严格区分了bytes和str两种数据类型，你不能在需要bytes类型参数的时候使用str参数，反之亦然。这点在读写磁盘文件时容易碰到。</p><p>在bytes和str的互相转换过程中，实际就是编码解码的过程，必须显式地指定编码格式。</p><p>我们再把字符串s1，转换成gbk编码的bytes类型：</p><p>>&gt;&gt; s1’中文’&gt;&gt;&gt; type(s1)<class 'str'="">&gt;&gt;&gt; b =  bytes(s1, encoding=’gbk’)&gt;&gt;&gt; bb’\xd6\xd0\xce\xc4’</class></p><p>测试：</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:</p><p>​    temp = b’steve’</p><p>​    print(type(temp))</p><p>​    ret = temp.decode(encoding=’utf-8’)</p><p>​    print(ret,type(ret))</p><p>​    mbyte = ‘fuck’.encode(encoding=’utf-8’)</p><p>​    print(mbyte,type(mbyte))</p><p>​    pass</p><p>结果：</p><p><img src="/2018/08/18/Python3中的bytes和str类型/2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编码历史：&lt;/p&gt;
&lt;p&gt;最早的字符编码规范是ASCII码，一种8位即1个字节的编码规范&lt;/p&gt;
&lt;p&gt;以ASCII编码为例，它规定1个字节8个比特位代表1个字符的编码，也就是“00000000”这么宽，一个一个字节的解读。例如：01000001表示大写字母A，有时我们会“
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Json模块dumps、loads、dump、load函数</title>
    <link href="http://yoursite.com/2018/08/18/Json%E6%A8%A1%E5%9D%97dumps%E3%80%81loads%E3%80%81dump%E3%80%81load%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/08/18/Json模块dumps、loads、dump、load函数/</id>
    <published>2018-08-18T05:26:25.000Z</published>
    <updated>2018-08-18T05:28:24.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、json-dumps"><a href="#1、json-dumps" class="headerlink" title="1、json.dumps()"></a>1、json.dumps()</h3><p> json.dumps()用于将dict类型的数据转成str，因为如果直接将dict类型的数据写入json文件中会发生报错，因此在将数据写入时需要用到该函数。</p><p>import json</p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’} </p><p>jsObj = json.dumps(name_emb)    </p><p>print(name_emb)</p><p>print(jsObj)</p><p>print(type(name_emb))</p><p>print(type(jsObj))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/1.png" alt="img1"></p><p>若在数据写入json文件时，未先进行转换，报错如下</p><p>import json  </p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’}  </p><p>​          </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p># jsObj = json.dumps(name_emb)    </p><p>with open(emb_filename, “w”) as f:  </p><p>​    f.write(name_emb)  </p><p>​    f.close()  </p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/2.png" alt="img"></p><h3 id="2、json-loads"><a href="#2、json-loads" class="headerlink" title="2、json.loads()"></a>2、json.loads()</h3><p>json.loads()用于将str类型的数据转成dict。</p><p>import json</p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’} </p><p>jsDumps = json.dumps(name_emb)    </p><p>jsLoads = json.loads(jsDumps) </p><p>print(name_emb)</p><p>print(jsDumps)</p><p>print(jsLoads)</p><p>print(type(name_emb))</p><p>print(type(jsDumps))</p><p>print(type(jsLoads))   </p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/3.png" alt="img"></p><h3 id="3、json-dump"><a href="#3、json-dump" class="headerlink" title="3、json.dump()"></a>3、json.dump()</h3><p>json.dump()用于将dict类型的数据转成str，并写入到json文件中。</p><p>下面两种方法都可以将数据写入json文件：</p><p>import json  </p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’}  </p><p>​          </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p># solution 1 方法1：</p><p>jsObj = json.dumps(name_emb)    </p><p>with open(emb_filename, “w”) as f:  </p><p>​    f.write(jsObj)  </p><p>​    f.close()  </p><p>​    </p><p># solution 2 方法2：</p><p>json.dump(name_emb, open(emb_filename, “w”))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/4.png" alt="img"></p><h3 id="4、json-load"><a href="#4、json-load" class="headerlink" title="4、json.load()"></a>4、json.load()</h3><p>json.load()用于从json文件中读取数据。</p><p>import json  </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p>jsObj = json.load(open(emb_filename))    </p><p>print(jsObj)</p><p>print(type(jsObj))</p><p>#遍历字典（键值对）</p><p>for key in jsObj.keys():</p><p>​        print(‘key: %s   value: %s’ % (key,jsObj.get(key)))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/5.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、json-dumps&quot;&gt;&lt;a href=&quot;#1、json-dumps&quot; class=&quot;headerlink&quot; title=&quot;1、json.dumps()&quot;&gt;&lt;/a&gt;1、json.dumps()&lt;/h3&gt;&lt;p&gt; json.dumps()用于将dict类型的数据转
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/08/18/hello-world/"/>
    <id>http://yoursite.com/2018/08/18/hello-world/</id>
    <published>2018-08-18T01:39:09.147Z</published>
    <updated>2018-08-18T01:39:09.148Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
