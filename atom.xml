<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-19T06:35:58.037Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python赋值与深浅拷贝</title>
    <link href="http://yoursite.com/2018/08/19/python%E8%B5%8B%E5%80%BC%E4%B8%8E%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2018/08/19/python赋值与深浅拷贝/</id>
    <published>2018-08-19T06:32:20.000Z</published>
    <updated>2018-08-19T06:35:58.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python——赋值与深浅拷贝"><a href="#python——赋值与深浅拷贝" class="headerlink" title="python——赋值与深浅拷贝"></a>python——赋值与深浅拷贝</h3><p>　　结合python变量存储的特性从内存的角度来谈一谈赋值和深浅拷贝~~~</p><h4 id="一、python的变量及其存储"><a href="#一、python的变量及其存储" class="headerlink" title="一、python的变量及其存储"></a>一、python的变量及其存储</h4><p>　　在详细的了解python中赋值、copy和deepcopy之前，我们还是要花一点时间来了解一下python内存中变量的存储情况。</p><p>　　在高级语言中，变量是对内存及其地址的抽象。对于python而言，python的一切变量都是对象，变量的存储，采用了引用语义的方式，存储的只是一个变量的值所在的内存地址，而不是这个变量的值本身。</p><p>引用语义：在python中，变量保存的是对象(值)的引用，我们称为引用语义。采用这种方式，变量所需的存储空间大小一致，因为变量只是保存了一个引用。也被称为对象语义和指针语义。</p><p>值语义：有些语言采用的不是这种方式，它们把变量的值直接保存在变量的存储区里，这种方式被我们称为值语义，例如C语言，采用这种存储方式，每一个变量在内存中所占的空间就要根据变量实际的大小而定，无法固定下来。</p><p>值语义和引用语义的区别：</p><p>​    值语义：   死的、 傻的、 简单的、 具体的、 可复制的</p><p>​    引用语义： 活的、 聪明的、 复杂的、 抽象的、 不可复制的</p><p>　　我们来看一张简单易懂的图理解一下python的引用语义和C语言值语义在内存中的存储情况，左右两个图，分别表示了python中变量存储与C语言中变量存储区别：</p><p><img src="/2018/08/19/python赋值与深浅拷贝/1.png" alt="img"></p><h4 id="二、各基本数据类型的地址存储及改变情况"><a href="#二、各基本数据类型的地址存储及改变情况" class="headerlink" title="二、各基本数据类型的地址存储及改变情况"></a>二、各基本数据类型的地址存储及改变情况</h4><p>​    在python中的数据类型包括：bool、int、long、float、str、set、list、tuple、dict等等。我们可以大致将这些数据类型归类为简单数据类型和复杂的数据结构。</p><p>​    我的划分标准是，如果一个数据类型，可以将其他的数据类型作为自己的元素，我就认为这是一种数据结构。</p><p>数据结构的分类有很多种，但是在Python中常用的只有集合、序列和映射三种结构。</p><p>对应python中的set、list(tuple、str)、dict；</p><p>常用的数据类型有int、long、float、bool、str等类型。（其中，str类型比较特别，因为从C语言的角度来说，str其实是一个char的集合，但是这与本文的关联不大，所以我们暂时不谈这个问题）</p><p><img src="/2018/08/19/python赋值与深浅拷贝/2.png" alt="img"></p><p>​    由于python中的变量都是采用的引用语义，数据结构可以包含基础数据类型，导致了在python中数据的存储是下图这种情况，每个变量中都存储了这个变量的地址，而不是值本身；对于复杂的数据结构来说，里面的存储的也只只是每个元素的地址而已：</p><p><img src="/2018/08/19/python赋值与深浅拷贝/3.png" alt="img"></p><h5 id="1-数据类型重新初始化对python语义引用的影响"><a href="#1-数据类型重新初始化对python语义引用的影响" class="headerlink" title="1.数据类型重新初始化对python语义引用的影响"></a>1.数据类型重新初始化对python语义引用的影响</h5><p>　　变量的每一次初始化，都开辟了一个新的空间，将新内容的地址赋值给变量。对于下图来说，我们重复的给str1赋值，其实在内存中的变化如下右图：</p><p>　　</p><p><img src="/2018/08/19/python赋值与深浅拷贝/4.png" alt="img"></p><p>​         </p><p><img src="/2018/08/19/python赋值与深浅拷贝/5.png" alt="img"></p><p>　　从上图我们可以看出，str1在重复的初始化过程中，是因为str1中存储的元素地址由’hello world’的地址变成了’new hello world’的。</p><h5 id="2-数据结构内部元素变化对python语义引用的影响"><a href="#2-数据结构内部元素变化对python语义引用的影响" class="headerlink" title="2.数据结构内部元素变化对python语义引用的影响"></a>2.数据结构内部元素变化对python语义引用的影响</h5><p>　　对于复杂的数据类型来说，改变其内部的值对于变量的影响：</p><p>　　</p><p><img src="/2018/08/19/python赋值与深浅拷贝/6.png" alt="img"></p><p>​         </p><p><img src="/2018/08/19/python赋值与深浅拷贝/7.png" alt="img"></p><p>　　当对列表中的元素进行一些增删改的操作的时候，是不会影响到lst1列表本身对于整个列表地址的，只会改变其内部元素的地址引用。可是当我们对于一个列表重新初始化(赋值)的时候，就给lst1这个变量重新赋予了一个地址，覆盖了原本列表的地址，这个时候，lst1列表的内存id就发生了改变。上面这个道理用在所有复杂的数据类型中都是一样的。</p><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><p>　　搞明白了上面的内容，再来探讨变量的赋值，就变得非常简单了。</p><h4 id="1-str的赋值"><a href="#1-str的赋值" class="headerlink" title="1.str的赋值"></a>1.str的赋值</h4><p>　　</p><p><img src="/2018/08/19/python赋值与深浅拷贝/8.png" alt="img"></p><p>​           </p><p><img src="/2018/08/19/python赋值与深浅拷贝/9.png" alt="img"></p><p>　　我们刚刚已经知道，str1的再次初始化（赋值）会导致内存地址的改变，从上图的结果我们可以看出修改了str1之后，被赋值的str2从内存地址到值都没有受到影响。</p><p>　　看内存中的变化，起始的赋值操作让str1和str2变量都存储了‘hello world’所在的地址，重新对str1初始化，使str1中存储的地址发生了改变，指向了新建的值，此时str2变量存储的内存地址并未改变，所以不受影响。</p><h4 id="2-复杂的数据结构中的赋值"><a href="#2-复杂的数据结构中的赋值" class="headerlink" title="2.复杂的数据结构中的赋值"></a>2.复杂的数据结构中的赋值</h4><p>　　刚刚我们看了简单数据类型的赋值，现在来看复杂数据结构变化对应内存的影响。</p><p>　　</p><p><img src="/2018/08/19/python赋值与深浅拷贝/10.png" alt="img"></p><p>​         </p><p><img src="/2018/08/19/python赋值与深浅拷贝/11.png" alt="img"></p><p>　　上图对列表的增加修改操作，没有改变列表的内存地址，lst1和lst2都发生了变化。</p><p>　　对照内存图我们不难看出，在列表中添加新值时，列表中又多存储了一个新元素的地址，而列表本身的地址没有变化，所以lst1和lst2的id均没有改变并且都被添加了一个新的元素。</p><p>　　简单的比喻一下，我们出去吃饭，lst1和lst2就像是同桌吃饭的两个人，两个人公用一张桌子，只要桌子不变，桌子上的菜发生了变化两个人是共同感受的。</p><h3 id="初识拷贝"><a href="#初识拷贝" class="headerlink" title="初识拷贝"></a>初识拷贝</h3><p>　　我们已经详细了解了变量赋值的过程。对于复杂的数据结构来说，赋值就等于完全共享了资源，一个值的改变会完全被另一个值共享。</p><p>　　然而有的时候，我们偏偏需要将一份数据的原始内容保留一份，再去处理数据，这个时候使用赋值就不够明智了。python为这种需求提供了copy模块。提供了两种主要的copy方法，一种是普通的copy，另一种是deepcopy。我们称前者是浅拷贝，后者为深拷贝。</p><p>　　深浅拷贝一直是所有编程语言的重要知识点，下面我们就从内存的角度来分析一下两者的区别。</p><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>　　首先，我们来了解一下浅拷贝。浅拷贝：不管多么复杂的数据结构，浅拷贝都只会copy一层。下面就让我们看一张图，来了解一下浅拷贝的概念。</p><p>​      　　</p><p><img src="/2018/08/19/python赋值与深浅拷贝/12.png" alt="img"></p><p><img src="/2018/08/19/python赋值与深浅拷贝/13.png" alt="img"></p><p>​      看上面两张图，我们加入左图表示的是一个列表sourcelist，</p><p>sourcelist = [‘str1’,’str2’,’str3’,’str4’,’str5’,[‘str1’,’str2’,’str3’,’str4’,’str5’]]；</p><p>　　右图在原有的基础上多出了一个浅拷贝的copylist，</p><p>copylist = [‘str1’,’str2’,’str3’,’str4’,’str5’,[‘str1’,’str2’,’str3’,’str4’,’str5’]]；</p><p>　　sourcelist和copylist表面上看起来一模一样，但是实际上在内存中已经生成了一个新列表，copy了sourceLst，获得了一个新列表，存储了5个字符串和一个列表所在内存的地址。</p><p>​      我们看下面分别对两个列表进行的操作，红色的框框里面是变量初始化，初始化了上面的两个列表；我们可以分别对这两个列表进行操作，例如插入一个值，我们会发现什么呢？如下所示：</p><p>​         </p><p><img src="/2018/08/19/python赋值与深浅拷贝/14.png" alt="img"></p><p>　　　从上面的代码我们可以看出，对于sourceLst和copyLst列表添加一个元素，这两个列表好像是独立的一样都分别发生了变化，但是当我修改lst的时候，这两个列表都发生了变化，这是为什么呢？我们就来看一张内存中的变化图：</p><p>​         </p><p><img src="/2018/08/19/python赋值与深浅拷贝/15.png" alt="img"></p><p>　　我们可以知道sourceLst和copyLst列表中都存储了一坨地址，当我们修改了sourceLst1的元素时，相当于用’sourceChange’的地址替换了原来’str1’的地址，所以sourceLst的第一个元素发生了变化。而copyLst还是存储了str1的地址，所以copyLst不会发生改变。</p><p>　　当sourceLst列表发生变化，copyLst中存储的lst内存地址没有改变，所以当lst发生改变的时候，sourceLst和copyLst两个列表就都发生了改变。</p><p>　　这种情况发生在字典套字典、列表套字典、字典套列表，列表套列表，以及各种复杂数据结构的嵌套中，所以当我们的数据类型很复杂的时候，用copy去进行浅拷贝就要非常小心。。。</p><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>　　刚刚我们了解了浅拷贝的意义，但是在写程序的时候，我们就是希望复杂的数据结构之间完全copy一份并且它们之间又没有一毛钱关系，应该怎么办呢？</p><p>　　我们引入一个深拷贝的概念，深拷贝——即python的copy模块提供的另一个deepcopy方法。深拷贝会完全复制原变量相关的所有数据，在内存中生成一套完全一样的内容，在这个过程中我们对这两个变量中的一个进行任意修改都不会影响其他变量。下面我们就来试验一下。</p><p>　      </p><p><img src="/2018/08/19/python赋值与深浅拷贝/16.png" alt="img"></p><p>​      看上面的执行结果，这一次我们不管是对直接对列表进行操作还是对列表内嵌套的其他数据结构操作，都不会产生拷贝的列表受影响的情况。我们再来看看这些变量在内存中的状况：</p><p>　　   </p><p><img src="/2018/08/19/python赋值与深浅拷贝/17.png" alt="img"></p><p>　　看了上面的内容，我们就知道了深拷贝的原理。其实深拷贝就是在内存中重新开辟一块空间，不管数据结构多么复杂，只要遇到可能发生改变的数据类型，就重新开辟一块内存空间把内容复制下来，直到最后一层，不再有复杂的数据类型，就保持其原引用。这样，不管数据结构多么的复杂，数据之间的修改都不会相互影响。这就是深拷贝~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python——赋值与深浅拷贝&quot;&gt;&lt;a href=&quot;#python——赋值与深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;python——赋值与深浅拷贝&quot;&gt;&lt;/a&gt;python——赋值与深浅拷贝&lt;/h3&gt;&lt;p&gt;　　结合python变量存储的特性从
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建专属博客</title>
    <link href="http://yoursite.com/2018/08/18/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/08/18/Hexo-Github搭建专属博客/</id>
    <published>2018-08-18T08:15:04.000Z</published>
    <updated>2018-08-18T08:28:51.460Z</updated>
    
    <content type="html"><![CDATA[<p>前言：电脑系统为window 10专业版，64位</p><p>相关步骤：</p><p>1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/1.png" alt="img"></p><p> 2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/2.png" alt="img"></p><p>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/3.png" alt="img"></p><p> 3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/4.png" alt="img"></p><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。 </p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/5.png" alt="img"></p><p> 4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/6.png" alt="img"></p><p>输入npm install hexo -g，开始安装Hexo</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/7.png" alt="img"></p><p>输入hexo -v，检查hexo是否安装成功</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/8.png" alt="img"></p><p>输入hexo init，初始化该文件夹（有点漫长的等待。。。）</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/9.png" alt="img"></p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/10.png" alt="img"></p><p>看到后面的“Start blogging with Hexo！”，激动有木有！！！！！</p><p>输入npm install，安装所需要的组件</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/11.png" alt="img"></p><p>输入hexo g，首次体验Hexo</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/12.png" alt="img"></p><p> 输入hexo s，开启服务器，访问该网址，正式体验Hexo</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/13.png" alt="img"></p><p>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/14.png" alt="img"></p><p>那么出现如下图就成功了</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/15.png" alt="img"></p><p> 5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/16.png" alt="img"></p><p>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱</p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/17.png" alt="img"></p><p>输入ls，列出该文件下的内容。下图说明存在</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/18.png" alt="img"></p><p> 输入ssh-keygen -t rsa -C “<a href="mailto:929762930@qq.com" target="_blank" rel="noopener">929762930@qq.com</a>”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/19.png" alt="img"></p><p> 输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/20.png" alt="img"></p><p> 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/21.png" alt="img"></p><p> 登录Github，点击头像下的settings，添加ssh</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/22.png" alt="img"></p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/23.png" alt="img"></p><p>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/24.png" alt="img"></p><p>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair</p><p>ssh-add -D</p><p>rm -r ~/.ssh</p><p>删除你在github中的public-key</p><p>重新生成ssh密钥对</p><p>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“</p><p>接下来正常操作</p><p>在github上添加公钥public-key:</p><p>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板</p><p>2、在github上添加公钥时，直接复制即可</p><p>3、保存</p><p>测试：</p><p>在终端 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/25.png" alt="img"></p><p>repo值是你在github项目里的ssh（右下角）</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/26.png" alt="img"></p><p>7、新建一篇博客，在cmd执行命令：hexo new post “博客名”</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/27.png" alt="img"></p><p> 这时候在文件夹_posts目录下将会看到已经创建的文件</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/28.png" alt="img"></p><p>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/29.png" alt="img"></p><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/30.png" alt="img"></p><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章</p><p><img src="/2018/08/18/Hexo-Github搭建专属博客/31.png" alt="img"></p><p> 好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言：电脑系统为window 10专业版，64位&lt;/p&gt;
&lt;p&gt;相关步骤：&lt;/p&gt;
&lt;p&gt;1、安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/08/18/Hexo-Github搭建专属博客/1.pn
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python3中的bytes和str类型</title>
    <link href="http://yoursite.com/2018/08/18/Python3%E4%B8%AD%E7%9A%84bytes%E5%92%8Cstr%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2018/08/18/Python3中的bytes和str类型/</id>
    <published>2018-08-18T08:06:47.000Z</published>
    <updated>2018-08-18T08:09:25.933Z</updated>
    
    <content type="html"><![CDATA[<p>编码历史：</p><p>最早的字符编码规范是ASCII码，一种8位即1个字节的编码规范</p><p>以ASCII编码为例，它规定1个字节8个比特位代表1个字符的编码，也就是“00000000”这么宽，一个一个字节的解读。例如：01000001表示大写字母A，有时我们会“偷懒”的用65这个十进制来表示A在ASCII中的编码。8个比特位，可以没有重复的最多表示2的8次方(255)个字符。</p><p>后来，计算机得到普及，中文、日文、韩文等等国家的文字需要在计算机内表示，ASCII的255位远远不够，于是标准组织制定出了叫做UNICODE的万国码，它规定任何一个字符（不管哪国的）至少以2个字节表示，可以更多。其中，英文字母就是用2个字节，而汉字是3个字节。这个编码虽然很好，满足了所有人的要求，但是它不兼容ASCII，同时还占用较多的空间和内存。因为，在计算机世界更多的字符是英文字母，明明可以1个字节就能够表示，非要用2个。</p><p>于是UTF-8编码应运而生，它规定英文字母系列用1个字节表示，汉字用3个字节表示等等。因此，它兼容ASCII，可以解码早期的文档。UTF-8很快就得到了广泛的应用。</p><p>在编码的发展历程中，我国还创造了自己的编码方式，例如GBK，GB2312，BIG5。他们只局限于在国内使用，不被国外认可。在GBK编码中，中文汉字占2个字节。</p><p><img src="/2018/08/18/Python3中的bytes和str类型/1.png" alt="img"></p><p>Python有个内置函数bytes()可以将字符串str类型转换成bytes类型，b实际上是一串01的组合，但为了在ide环境中让我们相对直观的观察，它被表现成了b’\xe4\xb8\xad\xe6\x96\x87’这种形式，开头的b表示这是一个bytes类型。\xe4是十六进制的表示方式，它占用1个字节的长度，因此”中文“被编码成utf-8后，我们可以数得出一共用了6个字节，每个汉字占用3个，这印证了上面的论述。在使用内置函数bytes()的时候，必须明确encoding的参数，不可省略。</p><p>我们都知道，字符串类str里有一个encode()方法，它是从字符串向比特流的编码过程。而bytes类型恰好有个decode()方法，它是从比特流向字符串解码的过程。除此之外，我们查看Python源码会发现bytes和str拥有几乎一模一样的方法列表，最大的区别就是encode和decode。</p><p>从实质上来说，字符串在磁盘上的保存形式也是01的组合，也需要编码解码。</p><p>1、在将字符串存入磁盘和从磁盘读取字符串的过程中，Python自动地帮你完成了编码和解码的工作，你不需要关心它的过程。</p><p>2、使用bytes类型，实质上是告诉Python，不需要它帮你自动地完成编码和解码的工作，而是用户自己手动进行，并指定编码格式。</p><p>3、Python已经严格区分了bytes和str两种数据类型，你不能在需要bytes类型参数的时候使用str参数，反之亦然。这点在读写磁盘文件时容易碰到。</p><p>在bytes和str的互相转换过程中，实际就是编码解码的过程，必须显式地指定编码格式。</p><p>我们再把字符串s1，转换成gbk编码的bytes类型：</p><p>>&gt;&gt; s1’中文’&gt;&gt;&gt; type(s1)<class 'str'="">&gt;&gt;&gt; b =  bytes(s1, encoding=’gbk’)&gt;&gt;&gt; bb’\xd6\xd0\xce\xc4’</class></p><p>测试：</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:</p><p>​    temp = b’steve’</p><p>​    print(type(temp))</p><p>​    ret = temp.decode(encoding=’utf-8’)</p><p>​    print(ret,type(ret))</p><p>​    mbyte = ‘fuck’.encode(encoding=’utf-8’)</p><p>​    print(mbyte,type(mbyte))</p><p>​    pass</p><p>结果：</p><p><img src="/2018/08/18/Python3中的bytes和str类型/2.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编码历史：&lt;/p&gt;
&lt;p&gt;最早的字符编码规范是ASCII码，一种8位即1个字节的编码规范&lt;/p&gt;
&lt;p&gt;以ASCII编码为例，它规定1个字节8个比特位代表1个字符的编码，也就是“00000000”这么宽，一个一个字节的解读。例如：01000001表示大写字母A，有时我们会“
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Json模块dumps、loads、dump、load函数</title>
    <link href="http://yoursite.com/2018/08/18/Json%E6%A8%A1%E5%9D%97dumps%E3%80%81loads%E3%80%81dump%E3%80%81load%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/08/18/Json模块dumps、loads、dump、load函数/</id>
    <published>2018-08-18T05:26:25.000Z</published>
    <updated>2018-08-18T05:28:24.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、json-dumps"><a href="#1、json-dumps" class="headerlink" title="1、json.dumps()"></a>1、json.dumps()</h3><p> json.dumps()用于将dict类型的数据转成str，因为如果直接将dict类型的数据写入json文件中会发生报错，因此在将数据写入时需要用到该函数。</p><p>import json</p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’} </p><p>jsObj = json.dumps(name_emb)    </p><p>print(name_emb)</p><p>print(jsObj)</p><p>print(type(name_emb))</p><p>print(type(jsObj))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/1.png" alt="img1"></p><p>若在数据写入json文件时，未先进行转换，报错如下</p><p>import json  </p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’}  </p><p>​          </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p># jsObj = json.dumps(name_emb)    </p><p>with open(emb_filename, “w”) as f:  </p><p>​    f.write(name_emb)  </p><p>​    f.close()  </p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/2.png" alt="img"></p><h3 id="2、json-loads"><a href="#2、json-loads" class="headerlink" title="2、json.loads()"></a>2、json.loads()</h3><p>json.loads()用于将str类型的数据转成dict。</p><p>import json</p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’} </p><p>jsDumps = json.dumps(name_emb)    </p><p>jsLoads = json.loads(jsDumps) </p><p>print(name_emb)</p><p>print(jsDumps)</p><p>print(jsLoads)</p><p>print(type(name_emb))</p><p>print(type(jsDumps))</p><p>print(type(jsLoads))   </p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/3.png" alt="img"></p><h3 id="3、json-dump"><a href="#3、json-dump" class="headerlink" title="3、json.dump()"></a>3、json.dump()</h3><p>json.dump()用于将dict类型的数据转成str，并写入到json文件中。</p><p>下面两种方法都可以将数据写入json文件：</p><p>import json  </p><p>name_emb = {‘a’:’1111’,’b’:’2222’,’c’:’3333’,’d’:’4444’}  </p><p>​          </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p># solution 1 方法1：</p><p>jsObj = json.dumps(name_emb)    </p><p>with open(emb_filename, “w”) as f:  </p><p>​    f.write(jsObj)  </p><p>​    f.close()  </p><p>​    </p><p># solution 2 方法2：</p><p>json.dump(name_emb, open(emb_filename, “w”))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/4.png" alt="img"></p><h3 id="4、json-load"><a href="#4、json-load" class="headerlink" title="4、json.load()"></a>4、json.load()</h3><p>json.load()用于从json文件中读取数据。</p><p>import json  </p><p>emb_filename = (‘D:\Pycharm2018\pythonprogram\emb_json.json’)  </p><p>jsObj = json.load(open(emb_filename))    </p><p>print(jsObj)</p><p>print(type(jsObj))</p><p>#遍历字典（键值对）</p><p>for key in jsObj.keys():</p><p>​        print(‘key: %s   value: %s’ % (key,jsObj.get(key)))</p><p><img src="/2018/08/18/Json模块dumps、loads、dump、load函数/5.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、json-dumps&quot;&gt;&lt;a href=&quot;#1、json-dumps&quot; class=&quot;headerlink&quot; title=&quot;1、json.dumps()&quot;&gt;&lt;/a&gt;1、json.dumps()&lt;/h3&gt;&lt;p&gt; json.dumps()用于将dict类型的数据转
      
    
    </summary>
    
    
  </entry>
  
</feed>
